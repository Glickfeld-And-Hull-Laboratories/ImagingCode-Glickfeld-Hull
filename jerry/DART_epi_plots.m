clear all; clear global; close all;
clc
ds = 'DART_expt_info'; %dataset info
dataStructLabels = {'contrastxori'};
rc = behavConstsDART; %directories
eval(ds);

fn_dat_folder = 'G:\home\ACh\Analysis\2p_analysis\epileptiform_analysis';
fn_out = 'G:\home\ACh\Analysis\2p_analysis\epileptiform_analysis\plots';

% mkdir(fn_dat_folder);
% mkdir(fn_out);


% these were generated by the respective analysis script
load('G:\home\ACh\Analysis\2p_analysis\epileptiform_analysis\std_cell_PV.mat');
load('G:\home\ACh\Analysis\2p_analysis\epileptiform_analysis\std_cell_SST.mat');


%% PV line

% line plot
f1 = figure;
f1.Name = 'PV_std_line';
sgtitle('PV STD Control vs. Post-DART');
xlim([0 3]);
xticks([1 2]);
xticklabels({'Control','DART'});
ylim([0 140]);
hold on

for iMouse = 1:size(std_cell_PV,1)
    curr_mouse = convertCharsToStrings(std_cell_PV{iMouse,2});
    mouse_data = std_cell_PV{iMouse,1};
    if curr_mouse == "i3309"
        plot(mouse_data(1:2),"Marker","o","Color","#0047AB","LineWidth",1); % cobalt blue
    elseif curr_mouse == "i3310"
        plot(mouse_data(1:2),"Marker","o","Color","#89CFF0","LineWidth",1); % baby blue
    elseif curr_mouse == "i3311"
        plot(mouse_data(1:2),"Marker","^","Color","#D95319","LineWidth",1); % mute orange-ish
    elseif curr_mouse == "i3327"
        plot(mouse_data(1:2),"Marker","o","Color","#40E0D0","LineWidth",1); % turquoise
    elseif curr_mouse == "i3328"
        plot(mouse_data(1:2),"Marker","^","Color","#8D4004","LineWidth",1); % rust
    end
end

legend('i3309','i3310','i3311 (PEG)','i3327','i3328 (PEG)');
hold off

saveas(gcf,fullfile(fn_out,'PV_std_line.pdf'));
%% PV scatter

moi = cell(5,1);
moi(1:3) = std_cell_PV(2:4,1);
moi(4:5) = std_cell_PV(10:11,1);

for iMouse = 1:size(moi,1)
    if length(moi{iMouse}) == 3
        all_sesh_this_mouse = moi{iMouse};
        moi{iMouse} = all_sesh_this_mouse(1:2);
    end
end

allMice_pv = cell2mat(moi);
allMice_pv = reshape(allMice_pv,2,[])';

% allMice_pv = cell2mat(moi);
% allMice_pv = reshape(allMice_pv,3,3);
% allMice_pv = allMice_pv(1:2,:);
% 
% f2 = figure;
% f2.Name = 'PV_std_scatter';
% hold on
% scatter(allMice_pv(1,:),allMice_pv(2,:));
% sgtitle('PV Scatter Control & DART');
% xlim([0 140]);
% ylim([0 140]);
% ylabel('DART');
% xlabel('Control');
% plot([0 max([ylim xlim])], [0 max([xlim ylim])], '--r');
% 
% hold off
% saveas(gcf,fullfile(fn_out,'PV_std_scatter.pdf'));

%% SST plots

% line plot
f3 = figure;
f3.Name = 'SST_std_line';
sgtitle('SST STD Control vs. Post-DART');
xlim([0 3]);
xticks([1 2]);
xticklabels({'Control','DART'});
ylim([0 140]);
hold on

for iMouse = 1:size(std_cell_SST,1)
    curr_mouse = convertCharsToStrings(std_cell_SST{iMouse,2});
    mouse_data = std_cell_SST{iMouse,1};
    if curr_mouse == "i2062"
        plot(mouse_data(1:2),"Marker",'o',"Color","#0047AB","LineWidth",1); % cobalt blue
    elseif curr_mouse == "i2067"
        plot(mouse_data(1:2),"Marker",'o',"Color","#89CFF0","LineWidth",1); % baby blue
    elseif curr_mouse == "i2066"
        plot(mouse_data(1:2),"Marker",'o',"Color","#7393B3","LineWidth",1); % blue grey
    end
end

legend('i2062','i2067','i2066');
hold off

saveas(gcf,fullfile(fn_out,'SST_std_line.pdf'));

% 

%% SST scatter

allMice_sst = cell2mat(std_cell_SST(:,1));

f4 = figure;
f4.Name = 'SST_std_scatter';
hold on
scatter(allMice_sst(:,1),allMice_sst(:,2));
sgtitle('SST Scatter Control & DART');
xlim([0 140]);
ylim([0 140]);
ylabel('DART');
xlabel('Control');
plot([0 max([ylim xlim])], [0 max([xlim ylim])], '--r');

hold off
% 
saveas(gcf,fullfile(fn_out,'SST_std_scatter.pdf'));

%% all scatter

pv_DART_mice = vertcat(allMice_pv(1:2,:),allMice_pv(4,:));
pv_PEG_mice = vertcat(allMice_pv(3,:),allMice_pv(5,:));


f5 = figure;
f5.Name = 'combine_scatter';
sgtitle('STD Scatter');
ylabel('Post-DART STD');
xlabel('Baseline STD');
hold on
scatter(pv_DART_mice(:,1),pv_DART_mice(:,2),"LineWidth",1.5,"MarkerEdgeColor","#0047AB");
scatter(pv_PEG_mice(:,1),pv_PEG_mice(:,2),"LineWidth",1.5,"MarkerEdgeColor","#89CFF0");
scatter(allMice_sst(:,1),allMice_sst(:,2),"LineWidth",1.5,"MarkerEdgeColor","#D95319");
xlim([0 140]);
ylim([0 140]);
plot([0 max([ylim xlim])], [0 max([xlim ylim])], '--',"Color",'black');
legend('PV+DART','PV+PEG','SST+DART');
hold off

saveas(gcf,fullfile(fn_out,'combined_scatter.pdf'));

%% all dots

% first calculate normalized value
norm_pv_dart = pv_DART_mice(:,2) ./ pv_DART_mice(:,1);
norm_pv_peg = pv_PEG_mice(:,2) ./ pv_PEG_mice(:,1);
norm_sst = allMice_sst(:,2) ./ allMice_sst(:,1);

f6 = figure;
f6.Name = 'combined_norm_std';
sgtitle('Normalized STD')
hold on
xticklabels({'PV & DART', 'PV & PEG','SST & DART'});
xticks([1.1 1.7 2.3])
xlim([0.5 2.9])
ylim([0 5])
plot(1.1,norm_pv_dart,'o','Color',"#0047AB");
plot(1.7,norm_pv_peg,'o','Color',"#89CFF0");
plot(2.3,norm_sst,'o','Color',"#D95319");
hold off
ylabel('Post-DART STD/Baseline STD')

% ax = gca;
% ax.FontSize = 8; 

saveas(gcf,fullfile(fn_out,'combined_norm_values.pdf'));

%% load the raw TCs if needed
fnroot = fullfile(rc.achAnalysis,'PV_YM90K','summary_analyses');
fn_epi = fullfile(fnroot,'epileptiform');
cd(fn_epi);
load('prepped_np_TCs_PV.mat');


fnroot = fullfile(rc.achAnalysis,'SST_YM90K','summary_analyses');
fn_epi = fullfile(fnroot,'epileptiform');
cd(fn_epi);
load('prepped_np_TCs_SST.mat');

fn_out = 'G:\home\ACh\Analysis\2p_analysis\epileptiform_analysis\plots';
cd(fn_out);

np_TC_SST = prepped_np_TCs_SST;
clear prepped_np_TCs_SST
np_TC_PV(1:3,:) = prepped_np_TCs_PV(2:4,:);
np_TC_PV(4:5,:) = prepped_np_TCs_PV(10:11,:);
clear prepped_np_TCs_PV

%% PV short time TC

ds = 'DART_expt_info';
eval(ds);

nMice = size(np_TC_PV,1);
mice = np_TC_PV(:,2);

for mouse = 1:nMice %iterate through mouse
    mouse_data = np_TC_PV{mouse,1};
    mouse_id = np_TC_PV{mouse,2};
    this_sessions = query_expt(str2double(mouse_id(2:end)));
    nSesh = size(mouse_data,1);

    perc_mat = NaN(nSesh,1);
    std_mat = NaN(nSesh,1);
    t_since_drug_mat = strings(nSesh,1);

    all_raw_f = cat(1,mouse_data{:,1});
    ylim_max = 20 + max(all_raw_f);
    ylim_min = min(all_raw_f)-20;

    figure; %full tc
    sgtitle(mouse_id);
    for sess_idx = 1:size(mouse_data,1)
        curr_sesh = mouse_data{sess_idx,1}; % data for the current imaging session of the current mouse
        this_session_num = this_sessions(sess_idx);
        t_since_drug_hrs = expt(this_session_num).multiday_timesincedrug_hours;
        t_since_drug_mat(mouse,sess_idx) = t_since_drug_hrs;
        nplots = length(this_sessions);

        if t_since_drug_hrs == '0'
            this_tp_title = 'baseline';
        else
            this_tp_title = [t_since_drug_hrs ' hrs post-DART'];
        end

        mean_curr_sesh = mean(curr_sesh);
        std_curr_sesh = std(curr_sesh);
        frac_past = sum(curr_sesh > (mean_curr_sesh+3*std_curr_sesh))/length(curr_sesh);
        perc_mat(sess_idx) = frac_past;
        std_mat(sess_idx) = std_curr_sesh;

        subplot(nplots,1,sess_idx);
        plot(curr_sesh);
        ylim([ylim_min ylim_max]);
        title([this_tp_title ' std= ' num2str(std_curr_sesh) ' frac=' num2str(frac_past)]);
    end
    % saveas(gcf,fullfile(fn_out,[mouse_id '_TC_full.pdf']));

    figure; % 10s TC
    sgtitle(mouse_id);

    start_frame = 21000;
    total_frames = 300;
    end_frame = start_frame + total_frames - 1;
    this_mouse_data = mouse_data(:,1);
    cropped_combine = cell(size(this_mouse_data,1),1);
    for iSession = 1:size(this_mouse_data,1)
        this_full_sesh = this_mouse_data{iSession};
        cropped = this_full_sesh(start_frame:end_frame);
        cropped_combine{iSession,1} = cropped;
    end

    all_raw_f = cat(1,cropped_combine{:,1});
    ylim_max = 20 + max(all_raw_f);
    ylim_min = min(all_raw_f)-20;

    for sess_idx = 1:size(mouse_data,1)
        curr_sesh = mouse_data{sess_idx,1}; % data for the current imaging session of the current mouse
        this_session_num = this_sessions(sess_idx);
        t_since_drug_hrs = expt(this_session_num).multiday_timesincedrug_hours;
        t_since_drug_mat(mouse,sess_idx) = t_since_drug_hrs;
        nplots = length(this_sessions);

        if t_since_drug_hrs == '0'
            this_tp_title = 'baseline';
        else
            this_tp_title = [t_since_drug_hrs ' hrs post-DART'];
        end

        mean_curr_sesh = mean(curr_sesh);
        std_curr_sesh = std(curr_sesh);
        frac_past = sum(curr_sesh > (mean_curr_sesh+3*std_curr_sesh))/length(curr_sesh);
        perc_mat(sess_idx) = frac_past;
        std_mat(sess_idx) = std_curr_sesh;

        subplot(nplots,1,sess_idx);
        plot(cropped_combine{sess_idx});
        ylim([ylim_min ylim_max]);
        title([this_tp_title ' std= ' num2str(std_curr_sesh) ' frac=' num2str(frac_past)]);
    end
    % saveas(gcf,fullfile(fn_out,[mouse_id '_TC_20s.pdf']));
end

%% SST short time TC

ds = 'DART_V1_contrast_ori_Celine';
eval(ds);

nMice = size(np_TC_SST,1);
mice = np_TC_SST(:,2);

% new_2066_data = cell(4,4);
% old_2066_data = np_TC_SST{3,1};
% new_2066_data(1:2,:) = old_2066_data(1:2,:);
% new_2066_data(3:4,:) = old_2066_data(4:5,:);
% np_TC_SST{3,1} = new_2066_data;


for mouse = 1:nMice %iterate through mouse
    mouse_data = np_TC_SST{mouse,1};
    mouse_id = np_TC_SST{mouse,2};
    this_sessions = query_expt_celine(str2double(mouse_id(2:end)));
    nSesh = size(mouse_data,1);

    perc_mat = NaN(nSesh,1);
    std_mat = NaN(nSesh,1);
    t_since_drug_mat = strings(nSesh,1);

    all_raw_f = cat(1,mouse_data{:,1});
    ylim_max = 20 + max(all_raw_f);
    ylim_min = min(all_raw_f)-20;

    figure; %full tc
    sgtitle(mouse_id);
    for sess_idx = 1:size(mouse_data,1)
        curr_sesh = mouse_data{sess_idx,1}; % data for the current imaging session of the current mouse
        this_session_num = this_sessions(sess_idx);
        t_since_drug_hrs = expt(this_session_num).multiday_timesincedrug_hours;
        t_since_drug_mat(mouse,sess_idx) = t_since_drug_hrs;
        nplots = length(this_sessions);

        if t_since_drug_hrs == '0'
            this_tp_title = 'baseline';
        else
            this_tp_title = [t_since_drug_hrs ' hrs post-DART'];
        end

        mean_curr_sesh = mean(curr_sesh);
        std_curr_sesh = std(curr_sesh);
        frac_past = sum(curr_sesh > (mean_curr_sesh+3*std_curr_sesh))/length(curr_sesh);
        perc_mat(sess_idx) = frac_past;
        std_mat(sess_idx) = std_curr_sesh;

        subplot(nplots,1,sess_idx);
        plot(curr_sesh);
        ylim([ylim_min ylim_max]);
        title([this_tp_title ' std= ' num2str(std_curr_sesh) ' frac=' num2str(frac_past)]);
    end
    % saveas(gcf,fullfile(fn_out,[mouse_id '_TC_full.pdf']));

    figure; % 10s TC
    sgtitle(mouse_id);

    start_frame = 12100;
    total_frames = 300;
    end_frame = start_frame + total_frames - 1;
    this_mouse_data = mouse_data(:,1);
    cropped_combine = cell(size(this_mouse_data,1),1);
    for iSession = 1:size(this_mouse_data,1)
        this_full_sesh = this_mouse_data{iSession};
        this_tot_frames = length(this_full_sesh);
        cropped = this_full_sesh(this_tot_frames-300:end);
        cropped_combine{iSession,1} = cropped;
    end

    all_raw_f = cat(1,cropped_combine{:,1});
    ylim_max = 20 + max(all_raw_f);
    ylim_min = min(all_raw_f)-20;

    for sess_idx = 1:size(mouse_data,1)
        curr_sesh = mouse_data{sess_idx,1}; % data for the current imaging session of the current mouse
        this_session_num = this_sessions(sess_idx);
        t_since_drug_hrs = expt(this_session_num).multiday_timesincedrug_hours;
        t_since_drug_mat(mouse,sess_idx) = t_since_drug_hrs;
        nplots = length(this_sessions);

        if t_since_drug_hrs == '0'
            this_tp_title = 'baseline';
        else
            this_tp_title = [t_since_drug_hrs ' hrs post-DART'];
        end

        mean_curr_sesh = mean(curr_sesh);
        std_curr_sesh = std(curr_sesh);
        frac_past = sum(curr_sesh > (mean_curr_sesh+3*std_curr_sesh))/length(curr_sesh);
        perc_mat(sess_idx) = frac_past;
        std_mat(sess_idx) = std_curr_sesh;

        subplot(nplots,1,sess_idx);
        plot(cropped_combine{sess_idx});
        ylim([ylim_min ylim_max]);
        title([this_tp_title ' std= ' num2str(std_curr_sesh) ' frac=' num2str(frac_past)]);
    end
    % saveas(gcf,fullfile(fn_out,[mouse_id '_TC_20s.pdf']));
end


%% PV std by running or not

load('G:\home\ACh\Analysis\2p_analysis\epileptiform_analysis\std_running_PV.mat');
% load('G:\home\ACh\Analysis\2p_analysis\epileptiform_analysis\std_running_SST.mat');



for iMouse = 1:size(std_stat_PV,1)
    if length(std_stat_PV{iMouse,1}) == 3
        all_sesh_this_mouse = std_stat_PV{iMouse,1};
        std_stat_PV{iMouse,1} = all_sesh_this_mouse(1:2);
    end
end

for iMouse = 1:size(std_loc_PV,1)
    if length(std_loc_PV{iMouse,1}) == 3
        all_sesh_this_mouse = std_loc_PV{iMouse,1};
        std_loc_PV{iMouse,1} = all_sesh_this_mouse(1:2);
    end
end

figure;
sgtitle('PV STD Scatter loc vs stat')
hold on

for i = 1:size(std_stat_PV,1)
    mus_dat = std_stat_PV{i,1};
    if i == 3 || i == 5
        scatter(mus_dat(1),mus_dat(2),"green","filled");
    else
        scatter(mus_dat(1),mus_dat(2),"green");
    end
end

for i = 1:size(std_loc_PV,1)
    mus_dat = std_loc_PV{i,1};
    if i == 3 || i == 5
        scatter(mus_dat(1),mus_dat(2),"red","filled");
    else
        scatter(mus_dat(1),mus_dat(2),"red");
    end
end

xlim([0 140])
ylim([0 140])
plot([0 max([ylim xlim])], [0 max([xlim ylim])], '--',"Color",'black');
ylabel('Post-DART STD');
xlabel('Baseline STD')

hold off


% combined line comparison PV
std_stat_PV_mat = reshape(cell2mat(std_stat_PV(:,1)),2,[]);
std_loc_PV_mat = reshape(cell2mat(std_loc_PV(:,1)),2,[]);

stat_PV_MI = std_stat_PV_mat(2,:) ./ std_stat_PV_mat(1,:);
loc_PV_MI = std_loc_PV_mat(2,:) ./ std_loc_PV_mat(1,:);

combined_PV_MI = vertcat(stat_PV_MI,loc_PV_MI);

figure
sgtitle('PV Stat vs Loc Modulation Index')
hold on

for mouse = 1:size(combined_PV_MI,2)
    if mouse == 3 || mouse == 5
        plot([0.7 1.4],combined_PV_MI(:,mouse),'Color',"blue","LineStyle","-","Marker","o")
    else
        plot([0.7 1.4],combined_PV_MI(:,mouse),'Color',"black","LineStyle","-","Marker","o")
    end
end
hold off

xticks([0.7 1.4])
xlim([0.3 1.8])
xticklabels(["stat" "loc"])
ylabel('Post-DART STD / Baseline STD')

%% Reserved for SST



%% movie (THIS SECTION RUNS SLOWLY)

% 3328 sesh 2

load('G:\home\ACh\Analysis\2p_analysis\PV_YM90K\i3328\250401\011\regOuts&Img.mat');
cd('G:\home\ACh\Data\2p_data\i3328\250401\011');
data_g = sbxread('011_000_000',0,4800);
data_g = squeeze(data_g(1,:,:,:));

g = gpuDevice;
fprintf('Free memory: %.2f MB\n', g.FreeMemory / 1024^2);

data_g_1 = gpuArray(data_g);
[~,data_try_reg1] = stackRegister_TH(data_g_1,[],[],double(outs(1:4800,:)));

data_try_reg1 = gather(data_try_reg1);
clear data_g_1

tic
[outs_ini,data_g_reg] = stackRegister(data_g,regImg);
toc


tic
data_g_gpu = gpuArray(data_g);
[outs_ini2,data_g_reg2] = stackRegister_ini(data_g_gpu,gpuArray(regImg));
data_g_reg_2 = gather(data_g_reg2);
clear data_g_gpu
toc


data_try = sbxread('011_000_000',84000,2400);
data_try = squeeze(data_try(1,:,:,:));
outs_try = outs(84000:86399,:);
data_try = gpuArray(data_try);
tic
[~,data_try_reg2] = stackRegister_TH(data_try,[],[],double(outs_try));
toc
data_try_avg = mean(data_try_reg,3);
data_try_reg = double(data_try_reg);

normA = data_try_reg - min(data_try_reg(:));
normA = normA ./ 2000;
normA(normA>1) = 1;

v = VideoWriter('myMovie.avi', 'Grayscale AVI');
v.FrameRate = 15;
open(v);
for k = 1:size(normA, 3)
    writeVideo(v, normA(:, :, k));
end
close(v);

try
    A = gpuArray.ones(529,796,4800,'uint16');
catch ME
    disp(ME.message);
end