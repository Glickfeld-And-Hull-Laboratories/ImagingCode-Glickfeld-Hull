function [r_m_out_sc g_m_out_sc b_m_out_sc resolution_out]=readTIFandflip(fname,resolution_in,rot,curr_order, new_order,resolution_goal)
%[r_m_out g_m_out b_m_out res_out]=readTIFandflip([pn vivo],[1.29 1.29 2],-45,[1 2 3], [-3 -2 1],[0.45 0.45 2]);

% function reads tif stack and flips it from current dimention/direction order
% to new dimention/direction order

% for 3 D matrixes:
% up Y  :  1
% down Y : -1
% rigth : -2
% left : 2
% up Z : 3
% down Z : -3

% for example to reorient 3 D stack with orientation:
% posterior is rigth, lateral is down Y,pia is up Z.
% to
% pia is up Y,posterior is up Z,lateral is left.
% one need to specify curr_order=[1 -2 3]  new_order=[3 2 1] (using
% arbitrary order [post lat pia])


%fname - tif stack name
% resolution_in - stack resolution ( [0.34 0.34 2])
% rot - initial rotation in degrees (countercolockwise)
% resolution_goal -desired final resolution 

if nargin<6
    resolution_goal=resolution_in;
end

% read tif file info
info = imfinfo(fname,'tif');
W=info(1).Width;
H=info(1).Height;
nFrames=length(info);
tmp_im= imread(fname,1);
data_class=class(tmp_im(1));

% find size of rotated image
if ~isempty(rot) && rot~=0;
    tst_rot = imrotate(tmp_im(:,:,1),rot,'bilinear','loose');
    W=size(tst_rot,2);
    H=size(tst_rot,1);
end

%preallocate color stacks
Red_im=zeros(H,W,nFrames,data_class);
Green_im=zeros(H,W,nFrames,data_class);
Blue_im=zeros(H,W,nFrames,data_class);


%read frames, separete color chennels
for frame=1:nFrames
    tmp_im= imread(fname,frame);
    %rotate if necessary
    if ~isempty(rot) && rot~=0;
        Red_im(:,:,frame) = imrotate(tmp_im(:,:,1),rot,'bilinear','loose');
        Green_im(:,:,frame) = imrotate(tmp_im(:,:,2),rot,'bilinear','loose');
        Blue_im(:,:,frame) = imrotate(tmp_im(:,:,3),rot,'bilinear','loose');
    else
        Red_im(:,:,frame)=tmp_im(:,:,1);
        Green_im(:,:,frame)=tmp_im(:,:,2);
        Blue_im(:,:,frame)=tmp_im(:,:,3);
    end
end

%adjust contrast
Red_im_adj = stack_localcontrastadj(Red_im, 30, 1);
Green_im_adj = stack_localcontrastadj(Green_im, 30, 1);

%bandpass filter


%flip according to orientations
[r_m_out dim_shift]=fliprotND(Red_im_adj,curr_order, new_order);
[g_m_out dim_shift]=fliprotND(Green_im_adj,curr_order, new_order);
[b_m_out dim_shift]=fliprotND(Blue_im,curr_order, new_order);


%find new resolution and scaling coefficients
resolution_flipped=resolution_in(dim_shift);
%resolution_flipped
resolution_ratio=resolution_goal./resolution_flipped;
resolution_ratio(3)=round(resolution_ratio(3));
%resolution_ratio
resolution_out=resolution_ratio.*resolution_flipped;
resolution_out

out_size=size(r_m_out);

%t=find(abs(new_order)==3); %find new direction of old z direction

fname_out=strrep(fname,'.','_flipped.');

clear Red_im;
clear Green_im;
clear Blue_im;

        RGB_frame=zeros(length(1:resolution_ratio(1):out_size(1)),length(1:resolution_ratio(2):out_size(2)),3,data_class);
        r_m_out_sc=zeros(length(1:resolution_ratio(1):out_size(1)),length(1:resolution_ratio(2):out_size(2)),length(1:resolution_ratio(3):out_size(3)),data_class);
        g_m_out_sc=zeros(length(1:resolution_ratio(1):out_size(1)),length(1:resolution_ratio(2):out_size(2)),length(1:resolution_ratio(3):out_size(3)),data_class);
        b_m_out_sc=zeros(length(1:resolution_ratio(1):out_size(1)),length(1:resolution_ratio(2):out_size(2)),length(1:resolution_ratio(3):out_size(3)),data_class);


% reslice/interpolate stack for new resolution, save stack
out_fr=0;
for frame=1:resolution_ratio(3):out_size(3)
    if resolution_ratio(1)~=1 ||  resolution_ratio(2)~=1; %resample if necessary and combime into RGB image
        RGB_frame(:,:,1)=interp2(double(r_m_out(:,:,frame)),1:resolution_ratio(2):out_size(2),(1:resolution_ratio(1):out_size(1))','spline');
        RGB_frame(:,:,2)=interp2(double(g_m_out(:,:,frame)),1:resolution_ratio(2):out_size(2),(1:resolution_ratio(1):out_size(1))','spline');
        RGB_frame(:,:,3)=interp2(double(b_m_out(:,:,frame)),1:resolution_ratio(2):out_size(2),(1:resolution_ratio(1):out_size(1))','spline');
        out_fr=out_fr+1;
        r_m_out_sc(:,:,out_fr)=RGB_frame(:,:,1);
        g_m_out_sc(:,:,out_fr)=RGB_frame(:,:,2);
        b_m_out_sc(:,:,out_fr)=RGB_frame(:,:,3);
    else %combime into RGB image
        RGB_frame=zeros(out_size(1),out_size(2),3,data_class);
        RGB_frame(:,:,1)=r_m_out(:,:,frame);
        RGB_frame(:,:,2)=g_m_out(:,:,frame);
        RGB_frame(:,:,3)=b_m_out(:,:,frame);
    end

    if frame==1;
        imwrite(RGB_frame,fname_out,'WriteMode','overwrite','Compression','none');
    else
        imwrite(RGB_frame,fname_out,'WriteMode','append','Compression','none');
    end

end

    if resolution_ratio(1)==1 &&  resolution_ratio(2)==1; 
        r_m_out_sc=r_m_out;
        g_m_out_sc=r_m_out;
        b_m_out_sc=r_m_out;        
    end





