function outStack = stack_annotator(stack, strsToWrite, framesToWrite, ...
                                    pixStarts, textProps)
%
%
%  background always transparent now
%
%$Id$

[nRows,nCols,nFrames,nPlanes] = size(stack);

if nargin < 3, framesToWrite = 1:nFrames; end
if nargin < 4, pixStarts = [10 10]; end
if nargin < 5, textProps = {}; end  % defaults in render_t_to_a2
    
% replicate options if not cells already
nFramesToWrite = length(framesToWrite); 
if ~iscell(strsToWrite), strsToWrite = { strsToWrite }; end
if length(strsToWrite) == 1
    strsToWrite = repmat(strsToWrite, 1, nFramesToWrite);
end
assert(nFramesToWrite == length(strsToWrite));


if ~iscell(pixStarts), pixStarts = { pixStarts }; end
if length(pixStarts) == 1
    pixStarts = repmat(pixStarts, 1, nFramesToWrite);
end

if iscell(textProps) && isempty(textProps) || ischar(textProps{1})
    % is a stropt, needs wrapping
    textProps = { textProps };
end
if length(textProps) == 1
    textProps = repmat(textProps, 1, nFramesToWrite);
end

%%%

tIntmax = intmax(class(stack(1)));
for iF = 1:nFramesToWrite
    tFN = framesToWrite(iF);
    tStr = strsToWrite{iF};
    tProps = textProps{iF};

    % get text
    tImg = render_text_to_array2(tStr, [nRows nCols], ...
                                 'k', ...  % add color below
                                 pixStarts{iF}, ...
                                 tProps{:});
    
    % spank it onto array
    % separately by color
    if nPlanes == 3
        % make text rgb if not already
        if size(tImg,3) == 1
            tImg = repmat(tImg, [1 1 3]);
        end
        
        tFr = squeeze(stack(:,:,tFN,:));
        for iP=1:3
            % do each plane separately; yes this is nasty
            %  but easier than doing num indexing; here logical matrices
            tP = tFr(:,:,iP);
            tP(tImg(:,:,iP)>0) = 0; 
            tFr(:,:,iP) = tP + tImg(:,:,iP);
        end
        stack(:,:,tFN,:) = tFr;
    elseif nPlanes == 1
        tFr = stack(:,:,tFN);
        tImgFlat = tImg(:,:,1);
        tFr(tImgFlat > 0) = 0;
        tFr = tFr + tImgFlat;
        stack(:,:,tFN) = tFr;
    end
end


% return output
outStack = stack;
