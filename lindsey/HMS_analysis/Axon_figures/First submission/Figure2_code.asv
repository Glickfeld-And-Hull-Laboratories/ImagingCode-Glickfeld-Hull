fig_base = '\\zmey\storlab\users\Lindsey\Projects\HVAs\Manuscript\Figures_2012';
fig = 2;
areas = strvcat('PM', 'LM', 'AL');
area_order = [2;3;1];
col = strvcat('c', 'k', 'r');
P = 2;
matrix = 'SF5xTF5';
inj = 'V1';
sum_base = 'G:\users\lindsey\analysisLG\experiments';

fn_summary = fullfile(sum_base, [matrix '_' num2str(P) 'P_' inj '_axon_summary'], 'all_fits.mat');
load(fn_summary);
fn_good = fullfile(sum_base, [matrix '_' num2str(P) 'P_' inj '_axon_summary'], 'good_fits.mat');
load(fn_good);

%tuning all areas other mice

figure;
start = 1;

mouse = 'M14';
expt = [12;9;11];

avg_tuning_long = zeros(25,3);
for iArea = 1:3
    iexp = expt(iArea);
    plotfit = [];
    n = all_fits(iArea).expt(iexp).n(1);
    for iCell = 1:n
        if all_fits(iArea).expt(iexp).bouton(iCell).goodfit ==1;
            plotfit = cat(3, plotfit, all_fits(iArea).expt(iexp).bouton(iCell).plotfit);
        end
    end
    avg_tuning = mean(plotfit,3);
    avg_tuning_long(:,iArea) = reshape((avg_tuning./max(max(avg_tuning,[],1),[],2))'*20,[25 1]);
end

subplot(6,6,start)
text(0.5,0.5,mouse);
axis off
for iArea = 1:3
    iexp = expt(area_order(iArea));
    subplot(6,6,start+1)
    for iCond = 1:25
        scatter(x_grid_long(iCond,1),y_grid_long(iCond,1), avg_tuning_long(iCond,area_order(iArea))^2,'.k')
        hold on
        axis square
        axis off
        xlim([0 6])
        ylim([0 6])
    end
    start = start+1;
    title(num2str(all_fits(area_order(iArea)).expt(iexp).n(2)));
end


mouse = 'Y26';
expt = [7;3;8];
start = start+3;
avg_tuning_long = zeros(25,3);
for iArea = 1:3
    iexp = expt(iArea);
    plotfit = [];
    n = all_fits(iArea).expt(iexp).n(1);
    for iCell = 1:n
        if all_fits(iArea).expt(iexp).bouton(iCell).goodfit ==1;
            plotfit = cat(3, plotfit, all_fits(iArea).expt(iexp).bouton(iCell).plotfit);
        end
    end
    avg_tuning = mean(plotfit,3);
    avg_tuning_long(:,iArea) = reshape((avg_tuning./max(max(avg_tuning,[],1),[],2))'*20,[25 1]);
end

subplot(6,6,start)
text(0.5,0.5,mouse);
axis off
for iArea = 1:3
    iexp = expt(area_order(iArea));
    subplot(6,6,start+1)
    for iCond = 1:25
        scatter(x_grid_long(iCond,1),y_grid_long(iCond,1), avg_tuning_long(iCond,area_order(iArea))^2,'.k')
        hold on
        axis square
        axis off
        xlim([0 6])
        ylim([0 6])
    end
    start = start+1;
    title(num2str(all_fits(area_order(iArea)).expt(iexp).n(2)));
end

start = start+3;
subplot(6,6,start)
text(0.5,0.5,'AVG');
axis off
for iArea = 1:3
    subplot(6,6,start+1)
    av_plotfit = mean(Goodfits(area_order(iArea)).plotfit,1)';
    plotfit = av_plotfit./max(av_plotfit,[],1)*20;
    for iCond = 1:25
        scatter(x_grid_long(iCond,1),y_grid_long(iCond,1), plotfit(iCond,:).^2 ,'.k')
        hold on
        axis square
        axis off
        xlim([0 6])
        ylim([0 6])
    end
    start = start+1;
    title(num2str(size(Goodfits(area_order(iArea)).dF,1)));
end

fn_out = fullfile(fig_base, ['Figure' num2str(fig)], [matrix '_' num2str(P) 'P_' inj '_all_areas_allmice_avgs.ps']);
        print(gcf, '-depsc', fn_out);
%summary
SF_vec0 = [.32 .16 .08 .04 .02]; %flipped to have low to high SF in square  %flipud
TF_vec0 = [1 2 4 8 15];
[tftf,sfsf] = meshgrid(TF_vec0,SF_vec0); 
TF_vec_adj = [1 2 4 8 16];
tftf2 = meshgrid(TF_vec_adj); 
speed_grid = tftf2./sfsf;
speed_grid_long = reshape(speed_grid', 1, 25);
SF_grid_long = reshape(sfsf', 1, 25);
TF_grid_long = reshape(tftf', 1, 25);
uspeeds = unique(speed_grid);

all_speed_fit = zeros(length(uspeeds), 2, 3);
all_TF_fit = zeros(length(TF_vec0), 2, 3);
all_SF_fit = zeros(length(SF_vec0), 2, 3);
all_SFxTF_fit = zeros(5,5,3);
for iArea = 1:3
    all_SFxTF_fit(:,:,iArea) = reshape(mean(Goodfits(iArea).plotfit,1),5,5)';    
    speed_tuning_fit = zeros(length(uspeeds),2);
    TF_tuning_fit = zeros(length(TF_vec0),2);
    SF_tuning_fit = zeros(length(SF_vec0),2);
    for ispeed = 1:length(uspeeds)
        ind = find(speed_grid_long == uspeeds(ispeed));
        if length(ind)>1
            goodfits_ispeed = mean(Goodfits(iArea).plotfit(:,ind),2);
        elseif length(ind) == 1
            goodfits_ispeed = Goodfits(iArea).plotfit(:,ind);
        end
        speed_tuning_fit(ispeed,1) = mean(goodfits_ispeed,1);
        speed_tuning_fit(ispeed,2) = std(goodfits_ispeed, [],1)./sqrt(size(goodfits_ispeed,1));
    end
    all_speed_fit(:,:,iArea) = speed_tuning_fit;
    for iTF = 1:length(TF_vec0)
        ind = find(TF_grid_long == TF_vec0(iTF));
        if length(ind)>1
            goodfits_iTF = mean(Goodfits(iArea).plotfit(:,ind),2);
        elseif length(ind) == 1
            goodfits_iTF = Goodfits(iArea).plotfit(:,ind);
        end
        TF_tuning_fit(iTF,1) = mean(goodfits_iTF,1);
        TF_tuning_fit(iTF,2) = std(goodfits_iTF, [],1)./sqrt(size(goodfits_iTF,1));
    end
    all_TF_fit(:,:,iArea) = TF_tuning_fit;
    for iSF = 1:length(SF_vec0)
        ind = find(SF_grid_long == SF_vec0(iSF));
        if length(ind)>1
            goodfits_iSF = mean(Goodfits(iArea).plotfit(:,ind),2);
        elseif length(ind) == 1
            goodfits_iSF = Goodfits(iArea).plotfit(:,ind);
        end
        SF_tuning_fit(iSF,1) = mean(goodfits_iSF,1);
        SF_tuning_fit(iSF,2) = std(goodfits_iSF, [],1)./sqrt(size(goodfits_iSF,1));
    end
    all_SF_fit(:,:,iArea) = SF_tuning_fit;
end

all_SFxTF_long = zeros(25,3);
for iArea = 1:3
    all_SFxTF_long(:,iArea) = reshape((all_SFxTF_fit(:,:,iArea)./max(max(all_SFxTF_fit(:,:,iArea),[],1),[],2))'*50,[25 1]);        
end
area_order = [2;3;1];
figure;
start = 1;
for iArea = 1:3
    subplot(2,3,start)
    for iCond = 1:25
        scatter(x_grid_long(iCond,1),y_grid_long(iCond,1), all_SFxTF_long(iCond,area_order(iArea))^2,'.k')
        hold on
        axis square
        axis off
        xlim([0 6])
        ylim([0 6])
    end
    title(num2str(length(Goodfits(area_order(iArea)).dF)));
    colormap(gray)
    subplot(2,3,4)
    errorbar(log2(TF_vec0), all_TF_fit(:,1,iArea),all_SF_fit(:,2,iArea),col(iArea,:));
    hold on
    title('TF')
    ylabel('dF/F')
    xlabel('log2(TF)')
    xlim([-1 5])
    ylim([0 .2])
    subplot(2,3,5)
    errorbar(log2(SF_vec0), all_SF_fit(:,1,iArea),all_SF_fit(:,2,iArea),col(iArea,:));
    hold on
    title('SF')
    xlabel('log2(SF)')
    ylim([0 .2])
    xlim([-6 -1])
    subplot(2,3,6)
    errorbar(log2(uspeeds), all_speed_fit(:,1,iArea),all_speed_fit(:,2,iArea),col(iArea,:));
    hold on
    title('speed')
    xlabel('log2(speed)')
    ylim([0 .2])
    xlim([1 10])
    start = start+1;
end
suptitle([matrix '  ' num2str(P) 'P  ' inj 'axons-  ' areas(1,:) '(' num2str(size(Goodfits(1).plotfit,1)) ')  ' areas(2,:) '(' num2str(size(Goodfits(2).plotfit,1)) ')  ' areas(3,:) '(' num2str(size(Goodfits(3).plotfit,1)) ')'])

fn_out = fullfile(fig_base, ['Figure' num2str(fig)], [matrix '_' num2str(P) 'P_' inj '_all_areas_tuning_curves.ps']);
        print(gcf, '-depsc', fn_out);
        
%quantification of difference in TF/SF and speed
SF_TF_speed_ratio = zeros(3,3);
SF_TF_speed_ratio(:,1) = squeeze(all_SF_fit(1,1,:)./all_SF_fit(5,1,:));
SF_TF_speed_ratio(:,2) = all_TF_fit(1,1,:)./all_TF_fit(5,1,:);
SF_TF_speed_ratio(:,3) = mean(all_speed_fit(1:2,1,:),1)./mean(all_speed_fit(8:9,1,:),1);

        
%scatters
%all boutons
figure;
for iArea = 1:3;
    area = areas(area_order(iArea),:);
    iexp = expt(area_order(iArea));
    subplot(1,3,iArea)
    n = all_fits(area_order(iArea)).expt(iexp).n(1);
    for iCell = 1:n
        if all_fits(area_order(iArea)).expt(iexp).bouton(iCell).goodfit ==1;
            scatter(log2(all_fits(area_order(iArea)).expt(iexp).bouton(iCell).TF_fit), log2(all_fits(area_order(iArea)).expt(iexp).bouton(iCell).SF_fit),3,'k');
            axis square
            box on
            hold on
            xlim([log2(1) log2(15)])
            ylim([log2(0.02) log2(0.32)])
        end
    end
    title(area)
end
fn_out = fullfile(fig_base, ['Figure' num2str(fig)], [matrix '_' num2str(P) 'P_' inj '_all_areas_AC45_scatters.ps']);
        print(gcf, '-depsc', fn_out);

%100 random boutons
figure;
for iArea = 1:3
    area = areas(area_order(iArea),:);
    iexp = expt(area_order(iArea));
    n = all_fits(area_order(iArea)).expt(iexp).n(1);
    goodfit = [];
    for iCell = 1:n
        if all_fits(area_order(iArea)).expt(iexp).bouton(iCell).goodfit ==1;
            goodfit = [goodfit iCell];
        end
    end
    for iRep = 1:3
    ind = randperm(length(goodfit));
    subplot(3,3,iArea+((iRep-1)*3))
        for iCell = 1:100
            scatter(log2(all_fits(area_order(iArea)).expt(iexp).bouton(goodfit(ind(iCell))).TF_fit), log2(all_fits(area_order(iArea)).expt(iexp).bouton(goodfit(ind(iCell))).SF_fit),3,'k');
            axis square
            box on
            hold on
            xlim([log2(1) log2(15)])
            ylim([log2(0.02) log2(0.32)])
        end
    end
end

fn_out = fullfile(fig_base, ['Figure' num2str(fig)], [matrix '_' num2str(P) 'P_' inj '_rand_scatters.ps']);
        print(gcf, '-depsc', fn_out);
        
%ellipse scatters

SF_vec0 = [.32 .16 .08 .04 .02]; %flipped to have low to high SF in square  %flipud
TF_vec0 = [1 2 4 8 15];

[tftf,sfsf] = meshgrid(TF_vec0,SF_vec0); 
grid2.sfsf = sfsf;
grid2.tftf = tftf;

x = [];
x(:,1) = log2(grid2.sfsf(:));
x(:,2) = log2(grid2.tftf(:));

TFminmax0 =  log2([1 15]);
SFminmax0 =  log2([.02 .32]);
        
TFminmax2 = [TFminmax0(1)-4 TFminmax0(2)+4];
SFminmax2 = [SFminmax0(1)-4 SFminmax0(2)+4];
% h1 = figure;

area_order = [2;3;1];
expt = [8; 4; 6];

h1 = figure;
h2 = figure;


for iArea = 3
    area = areas(area_order(iArea),:);
    iexp = expt(area_order(iArea));
    n = all_fits(area_order(iArea)).expt(iexp).n(1);
    ind = [];
    for iCell = 1:n
        if all_fits(area_order(iArea)).expt(iexp).bouton(iCell).goodfit == 1
            ind = [ind iCell];
        end
    end
    for iCell = 1:length(ind)
        fprintf([num2str(iCell) ' ']);
        xfit = [all_fits(area_order(iArea)).expt(iexp).bouton(ind(iCell)).dF_fit all_fits(area_order(iArea)).expt(iexp).bouton(ind(iCell)).sigma_SF all_fits(area_order(iArea)).expt(iexp).bouton(ind(iCell)).sigma_TF log2(all_fits(area_order(iArea)).expt(iexp).bouton(ind(iCell)).SF_fit) log2(all_fits(area_order(iArea)).expt(iexp).bouton(ind(iCell)).TF_fit) all_fits(area_order(iArea)).expt(iexp).bouton(ind(iCell)).xi_fit exp(-1*(1/8))];
        figure(h1);
        h0 = ezplot(@(x,y) Gauss2D_ellipseMA_forplotting(x,y,xfit),TFminmax2,SFminmax2);
        title(area);
        xlim(TFminmax0);
        ylim(SFminmax0);
        axis square;
        hold on
        hold on
        XData0 = get(h0,'XData');
        YData0 = get(h0,'YData');
        figure(h2);
        if length(XData0)>2
            if length(XData0)>10 & iscell(XData0)==0
                XData = XData0; 
                YData = YData0;
            else
                length(XData0)
                XData = [cell2mat(XData0(1))]; % cell2mat(XData0(2))]; 
                YData = [cell2mat(YData0(1))]; % cell2mat(YData0(2))]; 
            end

            h3 = patch(XData([1:2:end 1]),YData([1:2:end 1]),'k');
            set(h3,'FaceColor',[0 0 0],'FaceAlpha',.01,'EdgeColor',[1 1 1]*.4);
            axis([min(TFminmax0) max(TFminmax0) min(SFminmax0) max(SFminmax0)]);
            hold on
            axis square
            xlim(TFminmax0);
            ylim(SFminmax0);
        end   
    end
end
axis off
fn_out = fullfile(fig_base, ['Figure' num2str(fig)], [matrix '_' num2str(P) 'P_' inj '_ellipse_scatter_PM.ps']);
        print(gcf, '-depsc2', fn_out);


for iArea = 1:3
    start = 0;
    h1 = figure;
    h2 = figure;
    area = areas(area_order(iArea),:);
    iexp = expt(area_order(iArea));
    n = all_fits(area_order(iArea)).expt(iexp).n(1);
    goodfit = [];
    for iCell = 1:n
        if all_fits(area_order(iArea)).expt(iexp).bouton(iCell).goodfit ==1;
            goodfit = [goodfit iCell];
        end
    end
    for iRep = 1:2
        ind = randperm(length(goodfit));
        for iCell = 1:100
            fprintf([num2str(iCell) ' ']);
            xfit = [all_fits(area_order(iArea)).expt(iexp).bouton(goodfit(ind(iCell))).dF_fit all_fits(area_order(iArea)).expt(iexp).bouton(goodfit(ind(iCell))).sigma_SF all_fits(area_order(iArea)).expt(iexp).bouton(goodfit(ind(iCell))).sigma_TF log2(all_fits(area_order(iArea)).expt(iexp).bouton(goodfit(ind(iCell))).SF_fit) log2(all_fits(area_order(iArea)).expt(iexp).bouton(goodfit(ind(iCell))).TF_fit) all_fits(area_order(iArea)).expt(iexp).bouton(goodfit(ind(iCell))).xi_fit exp(-1*(1/8))];
            figure(h1);
            h0 = ezplot(@(x,y) Gauss2D_ellipseMA_forplotting(x,y,xfit),TFminmax2,SFminmax2);
            title(area);
            xlim(TFminmax0);
            ylim(SFminmax0);
            axis square;
            hold on
            hold on
            XData0 = get(h0,'XData');
            YData0 = get(h0,'YData');
            figure(h2);
            if length(XData0)>2
                if length(XData0)>10 & iscell(XData0)==0
                    XData = XData0; 
                    YData = YData0;
                else
                    length(XData0);
                    XData = [cell2mat(XData0(1))]; % cell2mat(XData0(2))]; 
                    YData = [cell2mat(YData0(1))]; % cell2mat(YData0(2))]; 
                end
                subplot(2,2,iRep+start)
                h3 = patch(XData([1:2:end 1]),YData([1:2:end 1]),'k');
                set(h3,'FaceColor',[0 0 0],'FaceAlpha',.05,'EdgeColor',[1 1 1]*.4);
                axis([min(TFminmax0) max(TFminmax0) min(SFminmax0) max(SFminmax0)]);
                hold on
                axis square
                xlim(TFminmax0);
                ylim(SFminmax0);
                title('N norm')
                axis off
                subplot(2,2,iRep+1+start)
                h4 = patch(XData([1:2:end 1]),YData([1:2:end 1]),'k');
                set(h4,'FaceColor',[0 0 0],'FaceAlpha',all_fits(area_order(iArea)).expt(iexp).bouton(goodfit(ind(iCell))).dF_fit./10,'EdgeColor',[1 1 1]*.4);
                axis([min(TFminmax0) max(TFminmax0) min(SFminmax0) max(SFminmax0)]);
                hold on
                axis square
                xlim(TFminmax0);
                ylim(SFminmax0);
                title('dF/F norm')
                axis off
            end
        end
        start = 1;
    end  
    suptitle(area);
    fn_out = fullfile(fig_base, ['Figure' num2str(fig)], [matrix '_' num2str(P) 'P_' inj '_' area '_ellipse_scatter.ps']);
        print(gcf, '-depsc2', fn_out);
end


