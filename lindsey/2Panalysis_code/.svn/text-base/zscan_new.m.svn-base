
%% 
clear all

nON = 144;
nOFF = 144;
nPlanes = 8;
nCond = 50;
nRep = 3;
P = 2;
begin = 96/nPlanes;
count_protocol = 1;
pre_win = [1 48/nPlanes];
post_win = [56/nPlanes 192/nPlanes];
image_base = 'K:\images\';
date = '111122';
mouse = 'M21';
userun = [3:6];
channel = '_green';
base = 'G:\users\lindsey\analysisLG\active mice\';
outDir = fullfile(base, mouse, date);

%% load and sort planes
for iRun = 1:length(userun);
    fn = fullfile(image_base, [date '_' mouse], ['run' num2str(userun(iRun))], ['run' num2str(userun(iRun)) channel]);
    stack = readtiff(fn);
    for iPlane = 1:nPlanes
        fn = fullfile(outDir,[date '_' mouse '_run' num2str(userun(iRun)) sprintf('_plane%i.tif',iPlane)]);
        writetiff(stack(:,:,iPlane:nPlanes:end), fn);
    end
end

%% Register each plane
stack2 = zeros(240,256,nPlanes);
stable = 5:25;
for iRun = 1:length(userun);
    for iPlane =1:nPlanes;
        fn_in= fullfile(outDir, [date '_' mouse '_run' num2str(userun(iRun)) sprintf('_plane%i.tif',iPlane)]);
        stack3 = readtiff(fn_in);
        if iRun == 1;
            av = mean(stack3(:,:,stable),3);
        else
        av = stack2(:,:,iPlane);   
        end
        [out,reg] = stackRegister(stack3,av,10);
        fn_reg = fullfile(outDir, [date '_' mouse '_run' num2str(userun(iRun)) sprintf('_plane%i_reg.tif',iPlane)]);
        writetiff(reg,fn_reg);
        fn_out = fullfile(outDir, [date '_' mouse '_run' num2str(userun(iRun)) sprintf('_plane%i_out.m',iPlane)]);
        save(fn_out, 'out');
        if iRun == 1;
            stack2(:,:,iPlane) = mean(reg,3);
        end
    end
    if iRun == 1;
        fn = fullfile(outDir, [date '_' mouse '_run' num2str(userun) '_volume_green.tif']);
        writetiff(stack2,fn);
    end
end;


%% max data across planes
for iRun = 1:length(userun)
    for iPlane = 1:nPlanes;
        fn_reg = fullfile(outDir, [date '_' mouse '_run' num2str(userun(iRun)) sprintf('_plane%i_reg.tif',iPlane)]);
        stack = readtiff(fn_reg);
        [a b z] = size(stack);
        if iPlane == 1;
            stack4 = zeros([a b z*nPlanes], 'uint16');
        end
        start = iPlane;
        for iScan = 1:z;
            stack4(:,:,start) = stack(:,:,iScan);
            start = start+nPlanes;
        end
    end
    max_scan = stackGroupMaxProject(stack4,8);
    fn_out = fullfile(outDir, [date '_' mouse '_run' num2str(userun(iRun)) '_max_reg.tif']);
    writetiff(max_scan, fn_out);
end

%% sort each plane
eval(['PARAMS_' date '_' mouse]);
resort_seq_only

for iPlane = 1:nPlanes
    stack_sort
end
    
%% Make cell masks

dF_max_stack = zeros(240,256,nPlanes);
for iPlane = 1:nPlanes
    fn_in= fullfile(outDir,'analysis', [date '_' mouse '_run' num2str(userun) sprintf('_plane%i_stack_dF_all.tif',iPlane)]);
    dF_stack = readtiff(fn_in);
    dF_avg = stackGroupProject(dF_stack(:,:,1:nCond),2);
    myfilter = fspecial('gaussian',[10 10], 0.5);
    dF_smooth = imfilter(dF_avg, myfilter);
    dF_max = max(dF_smooth,[],3);
    figure; imagesc(dF_max)
    dF_max_stack(:,:,iPlane) = dF_max;
end

for iPlane = 1  
    bwimgcell = imCellEditInteractive(dF_max_stack(:,:,iPlane),[]);
    [cell_mask ncells] = bwlabel(bwimgcell);
    fn_out = fullfile(outDir,'analysis', [date '_' mouse '_run' num2str(userun) sprintf('_plane%i_cellmask.mat',iPlane)]);
    save(fn_out, 'cell_mask');
    bwimgdend = imCellEditInteractive(dF_max_stack(:,:,iPlane),[]);
    [dend_mask ndend] = bwlabel(bwimgdend);
    fn_out = fullfile(outDir,'analysis', [date '_' mouse '_run' num2str(userun) sprintf('_plane%i_dendmask.mat',iPlane)]);
    save(fn_out, 'dend_mask');
end


%% Get time courses
timeCourses_cell_allplanes = [];
timeCourses_dend_allplanes = [];
for iPlane = 1:nPlanes
    fn_cell = fullfile(outDir,'analysis', [date '_' mouse '_run' num2str(userun) sprintf('_plane%i_cellmask.mat',iPlane)]);
    fn_dend = fullfile(outDir,'analysis', [date '_' mouse '_run' num2str(userun) sprintf('_plane%i_dendmask.mat',iPlane)]);
    fn_stack = fullfile(outDir,'analysis', [date '_' mouse '_run' num2str(userun)  sprintf('_plane%i_sorted.tif',iPlane)]);
    cell_mask = load(fn_cell);
    dend_mask = load(fn_dend);
    stack = readtiff(fn_stack);
    %get time courses
    timeCourses_cell = stackGetTimeCourses(stack,cell_mask);
    timeCourses_dend = stackGetTimeCourses(stack,dend_mask);

    timeCourses_cell_allplanes = [timeCourses_cell_allplanes timeCourses_cell];
    timeCourses_dend_allplanes = [timeCourses_dend_allplanes timeCourses_dend];
    
    %get dF/F for trial
    baseline_all = tcGetBaseline(timeCourses);
    dF_all = bsxfun(@minus,timeCourses,baseline_all);
    ratio_all = bsxfun(@rdivide,dF_all,baseline_all)*100;
    %sort trials and plot overlay
    for iCell = 1:allcells;
        figure;
        for trial = 1:size(stack,3)/epoch;
            plot(ratio_all(trial+((trial-1)*epoch):epoch*trial, iCell), 'c');
            hold on;
        end
        plot(ratio(:, iCell),'k');
        hold on;
    end
end

%% Resort whole stack
for iPlane = 1:nPlanes;
    seqfile = [date '_' mouse '_' expt '_max_Seqposition.mat'];
    load(fullfile(outDir,'analysis',seqfile));
    stack = readtiff(fullfile(outDir, [date '_' mouse '_' expt sprintf('_plane%i_reg.tif', iPlane)]));
    stack_sorted = zeros(size(stack),'uint16');
    for iRep = 1:nRep;
        for iCond = 1:nCond;
            ind = Seqposition(iCond).ind(iRep);
            stack_sorted(:,:,1+((iRep-1)*nCond*((nOFF+nON)/nPlanes))+((iCond-1)*((nOFF+nON)/nPlanes)):((nOFF+nON)/nPlanes)+((iRep-1)*nCond*((nOFF+nON)/nPlanes))+((iCond-1)*((nOFF+nON)/nPlanes))) = stack(:,:,1+(ind-1)*((nOFF+nON)/nPlanes):((nOFF+nON)/nPlanes)+(ind-1)*((nOFF+nON)/nPlanes));
        end
    end
    nblanks = length(Seqposition(end).ind);
    for iblank = 1:nblanks;
        ind = Seqposition(end).ind(iblank);
        stack_sorted(:,:,1+(nRep*nCond*((nOFF+nON)/nPlanes)+(iblank-1)*((nOFF+nON)/nPlanes)):((nOFF+nON)/nPlanes)+(nRep*nCond*((nOFF+nON)/nPlanes)+(iblank-1)*((nOFF+nON)/nPlanes))) = stack(:,:,1+(ind-1)*((nOFF+nON)/nPlanes):((nOFF+nON)/nPlanes)+(ind-1)*((nOFF+nON)/nPlanes));
    end
    fn = fullfile(outDir,'analysis',[date '_' mouse '_' expt sprintf('_plane%i_reg_sorted.tif', iPlane)]);
    writetiff(stack_sorted,fn);
end    

    
